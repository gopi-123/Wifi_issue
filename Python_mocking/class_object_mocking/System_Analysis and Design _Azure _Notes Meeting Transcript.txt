Deepak Goyal: and millions of transaction is happening. So one database cannot do it. So you have a multiple databases right or a multiple servers and when you have a multiple databases, it's like you are replicating the rate on multiple servers when you replicating on multiple servers, if one of the system goes down, okay, one of the server which is updating goes down and that information is not percolated to other people then it could have the inconsistency could be there. Right? So the consistency say so one of the aspect of the cap theorem is consistency. So any distributed system, which we make in the world has consistency. I will built in our partition to all hands. So the out of these three things we Okay, so that's why the banking systems are uses this concept of the Okay. consistency. So the consistency in the Well see you talk about the ICICI distributed. Bank you talk about the SBI you talk They have a multiple server because about any of the bank these Bank cannot have a one server. all of them how millions of customers can Is only two all three at the same time is not possible. So maybe if someone builds the banking system, they will love to have that consistency. Right? So constituency say that you always Get the most recent information, okay? Great. Let's talk about this second part that is availability. Okay, now availability says that you always get a response. And without a guarantee that it contains the most recent, right? Sometimes that is called as eventual consistency. So sometimes it's not an actual consistency the in a high availability system there availability says that your system might be highly available. But there may be possibility that you don't have the correct information. What does it mean? It means that it's it's pretty commonly you can see onto the The LinkedIn LinkedIn is pretty easily visible. So if you go to your profile page on the LinkedIn. There you see the followers count. The followers count is basically done on the eventual consistency concept. Okay, what is eventual consistency means is let's say if somebody's click on a follow one. So it's somebody I have a let's say one lakh followers somebody another person start following me. So my follower let's move from one triple zero one But even for some of the people when they go to my profile, they will find that there is still it is showing as one leg followers only instead of 1 lakh one follower. Okay, because there might be a one server where the right happens and then this information percolated to all the servers will take some time fraction of a second a minute sometimes and then eventually all will become consistent. But this information number of followers is not a significant information. I don't care whether it is a One lag or one like one it not going to harm anything for me in the system. I don't want to consistency here. Probably. I'm more worried about the availability. So what availability says is? Even if it is not guaranting the recent value or the recent right but it is at least it will show you the value. It is rather than saying that I cannot reach the server. The link is down the transaction cannot happen something like that rather than saying that I would say that okay. This was the data is there maybe it is not very fresh. Very latest data. Maybe one second five. Second minute two minute five minutes delete data, but it's still you will see that maybe let's say you are building a one quick info website. click info website does not want to have the saying that your availability is not there Cricinfo does not want to believe in the consistency. They probably believe in the availability. So multiple users in India Pakistan matches reaching to that website to see the score of the match maybe for some it is not updating very quickly, but still it is not saying that it is not updated. Right? So it is not worried about that. I will on all the server. I have the same value even if I don't have the latest value, that's fine. I'm still showing the old, you know little older or five minutes later or two minutes late values only. So that is an availability. So multiple system you find in the world that they are for them availability is more important rather than the consistency some of the systems you find where consistency is more important than the availability. Okay. So we are talking about these are the few of the parameters. Okay. So consistency means you want exact data, correct data updated data.  Okay, whoever correct from anywhere. Okay, that is consistency. I will be means You get the data, maybe it is not very recent. Okay, but you are fine with it. But at least you don't want to showcase that your system is down in the social media World. You'll never see that a social media network is down in the banking world you many times you find that you are banking system is down.  Got it. So reason is banking system more rely on the consistency social media Network more reliantly availability. Okay. Great. Let's talk about the third important aspect in this cap. Theorem. That is the where is my that is called us partition tolerance. So what happens under the partition tolerance? It says that system continue to operate despite of network trans partitions Communication Breakdown between the parts of the system. This means that this cannot be possible at all. So it is saying that If some network is also down is still the system is going to work. Generally it is not possible that in the real world that you never have this problem that Network partition does not happen Okay, so the partition tolerance you can never achieve. So this is in the real world. It is not possible. Okay, so in the real world You always find that your network can go down or network partition will occur. Okay, so it is not something which you can achieve it. So. The point is out of this cap theorem consistency availability. and the partition tolerance as the cap theorem says that all the three we cannot have it so we can choose only two at a time. So either we can choose. Consistency and partition tolerance, that means that the system will ensure that all the nodes see the same data, but it might become unavailable if there is Network issue, okay. the second system is that that is and you can choose. He what cap theorem says is Cap theorem says that at the same time you cannot have all the three possible. Only two things can be possible at a time. Okay, either CA AP or CP so, let's understand. What is CP CP means I'm choosing the consistency. I want consistency and the partition tolerance. That means that the system will ensure that all the nodes see the same data. But it might become unavailable if there is some Network issue. So I want partition tolerance if something goes down. I still want to update but I need the constant data. Okay. So if this is the case, then I will not see the data for some period of time that is completely fine, but I need a consistent data. If you choose up an AP based system that is availability and partition tolerance. It means that the system will be available. But data might be out of the sink because of the network issue. So maybe three servers are there. The server which has two, you know copy the data on multiple server that server is got down. So maybe you still able to access the information but this information might not be the latest one. Okay. So that is the CP. Sorry. That is an AP. The third thing is could be a cpapn CA so CA is not possible. Okay. So CA system is not available in the world in the real world. So consistency and availability. You cannot have a situation where your data is always consistently available. Consistent also unavailable also, okay. Because this means that you're assuming no network issue no partition happens, which is not realistic in the distributed all in the distributed World. There is very high chance that something might go down. It is not that 100% Everything will work 100% Okay. So some of the network issue can happen something goes down. So you cannot achieve the ca so you cannot have the consistency and availability both at the same time in the distributed system. So that is what our cap theorem says. So cap theorems see instead of consistency a for availability and P for partition tolerance so we can either have a CP system cons. Ncbase system or we can have a AP based system or availability-based system at the same time. We cannot have the consistency and availability both because Network partition will going to happen network is going to go down at some point in time. So we cannot have a situation where we are always have a consistent data and highly available. Okay, that is realistically not possible. Got it. Great. So if you see some of the examples of it. So if we talk about in terms of a real world implementation and examples of it. So for example, if somebody is more interested in the consistent. And CP system. So hbase is a distributed database, which is Works based on the CP. So it ensures that everything will get updated and multiple servers. If it is not updated you will learn access the information. So Edge base is built in such a way that it is focusing on consistency and partitioning. It's consistent and the partition tolerant way. Okay. Similarly. Google's big table is also based on the your CP. Okay, so it prioritize the consistency and the partition tolerance. But let's say if you want to build some kind of a social network there you need a system, which is more on kind of an AP system availability and partition tolerant in that case. You will find something like the Cassandra. So Cassandra DB is designed in such a way that again you don't need to do anything. It is build in itself in such a way that that Cassandra follows the availability and the partition tolerance. So it might be possible that it might not show you the recent data, but at least it will make your system available. Similarly Amazon's Dynamo DB is also a kind of a system which supports the AP availability and the partition tolerance. Okay again, all these if you see all these other databases only. Okay. So dynamodb is a database Cassandra is a database HPC is a database Google big table is kind of for database thing. Okay, so that's where we are more worried about it because our data get saved and we want to see the recent data or still data whatever it is, but we want our system to be available. Cut it. so in the real world As I said consistency and availability is not possible. Okay, because there is a very high chance of that some Network goes down and network up partition tolerance will can happen. Okay, great. So, this is a cap theorem for you guys. Sometimes can ask in an interview generally in basic service basic interviews It generally don't ask but yeah in some another systems are another product base companies interview. This can be asked some times. Some of you in the call. Okay. Great. So let's take an another example. So now again we move to the another example of System analysis and design so there is an another use case. Let's talk about that use case. So the use case is design a unique ID generator. Okay. So what is the requirement so requirement is something like this? I want to generate a unique IDs. Okay. I did need to be numerical. I didn't need to be like a 64 bit. I design need to be ordered by date. And I am building this not for our normal system. I'm building this for let's say Twitter. Okay, so I'm building this for Twitter in Twitter a minute. A lot of people is quitting right in a minute like thousands and thousands of the twit comes across the world. Okay, and every to it, I have to generate a unique ID. Okay. So I I ask you to design a system which will generate a unique. I didn't ID and this unique ID in such a way that it generate in such a faster rate. Like it can generate a 10,000 unique IDs per second. Also the IDS need to be unique. It should be numerical and it should be ordered by date. So it should not be something like that, you know. If one idea is created at some point another it is created after that. So it should be based on the order by date. Okay, so it's like the letter will have you know, the bigger ID this earlier one has a small ID kind of that. Okay, so it should be in based on order. order by date Now think about it. How we can develop these kind of a situation imagine that this kind of a question come in your system analysis and design interview. Okay, again, more 99.99% of the service based company will not ask in product based company some of the company might ask there are 10 20 examples of these kind of a use cases. Most of the time question comes around that only so you don't need not to be too much worried about it. Okay that how you will solve the problem. But still let's think let's think a little bit about it. Okay, I'll just open up that chat as well so that if somebody wanted to Think Through It how we can do it. Please let us know. Okay what you are thinking about this? Okay. How we can build this system. So generally whenever I'll tell you the approach. Generally when this kind of question comes in it is you don't need to jump in right the answer. Okay, so it's not about jumping and writing the answer. It's more about. Getting into the discussion and slowly reaching to that slowly slowly that answer. Okay, so maybe first what we can say is will be a normal system. Okay, so normally how you created the IDS the normal way of creation of ideas something like this which we called like you have a database, right? So normally you have a database. And whenever you need to I generate an ID go to the database database has a sequence generator that will sequence like 1 2 3 4 5 6 keep on doing it right? There's no big thing it do it make sense. But this will not solve our problem why this will not solve my problem. Because my problem is that I have to not do it just for you know, or I just don't want to do it for one system. I want to do it for the distributed system there there are multiple servers. So if there are multiple servers. How the same ID will maintain right so there will be ID generator will have a problem because if there are multiple I multiple servers are there then it could be a problem right to generate that multiple sequence got the point. So then think about it. If somebody asks you how you can do that, okay? One thing I don't know whether you heard about it or not. There is a concept called as you you ID is there okay, although you ideas not a solution here. But if I talk about the uid uuid stands for unique Universal unique identifier. Okay, so it stands for you you Universal unique identifier. The beauty of the uid is that uid is 128 bit number Give me a second. Take this call. so this uid is a very unique way. Okay. So what you do is you you ID something like this 0812 AMG x y z a b c d like this kind of one big number that is generally if you ever seen in some of the databases you you ID unique Universal unique identifier that you ID is a 128 bit in number and people say is that If you generate 1 billion, uid every second if you try to generate 1 billion. Which is such a huge number one billion, uid. If you generate every second then it will take approximately 100 years. To create an ID which is like a duplicate and and that probability is still 50% Not even 100% So you ID if you can use the uid it's almost a unique. Okay. It's an almost a unique and you can create millions and billions of the uid and a very fast pace also, okay and that you can do it, but the problem is You ID is here General you IDs are 128 bit. Our solution is asking is for the 64 bit. Okay, so probably we cannot use simple, uid, otherwise for identifying this unique identifier could be used here. Okay. so that's why I said it like a uid is like 128 bit long in general idea does not go up with the time in the uid. It is not order by time. And it is not a numeric as well. Okay. So what we can do is the solution could be think like this. Okay, the solution could be like this. A central ticket server kind of thing. What means is you have a multiple server? So every server is not generating their own ticket on ID. We have a one big server, which is generating the ID. So everyone will you know take the new ID from here. So we are one centralized. Ticket number and everything will generate from there. Let's say for example the PNR number, right what happens in the railway PNR number? So there's a one server probably you find that every PNR number. Like a millions of ticket get printed right every month. If not every year at least. Okay. So all those tickets is what all those ticket has a PNR number and that is unique. Somehow okay. So these kind of for creating a multiple unique identifier is a common problem. Okay, so and that need to be unique across the multiple distributed system in a single system. It's never been a problem you go ahead you do it and you're database as key sequence and it will solve the problem. The problem comes in when we have a distributed system. So we need to think from the distributed server angle. Okay. So in the distributed Surah if every server will do their own ideas generation, there's a possibility that there can be Collision like if multiple server as their own generator and then do it so then there could be repetition could be possible and what happens if one server goes down and another service takes up. So this could be a problem. So one of our answer would be like you create a one centralized ticket server and every other thing will generate get the ticket that idea from that ticket server, which is like a mean server, which is generating these kind of an IDs. okay, so this could be one of the problem of generating a unique IDs exactly into the world of the Twitter how to address all this problem Twitter solve this problem in this unique approach. So Twitter uses a concept College Twitter is snowflake approach. So how this Twitter solve this problem in this way. So in that Twitter, All the tweets, whatever the tweets get generated. That as a 64-bit ID and how this idea get generate. The first bit of that 64-bit they've sent it like an empty 41 bits. They use the timestamp exact timestamp on which this is ID is generating. So automatically that their IDs will become a you know, timestamp automatic timestamp. So in 64 bit the 41 bits is occupied by timestamp. 5 bits of identify by the data center, so Imagine that in Twitter case they have a multiple data centers. And in multiple data center, they have multiple servers like where the tutor servers are running. Okay. So they are using this concept. So every day they are keeping the data center IDs. They are keeping the machine ID in that data center in five bits and 12 bits. They are generating a one sequence number. Okay, a one constant sequence number. Okay. so which is keep on increasing so that's how they create a unique ID for in the 64-bit. That is what Twitter do under the hood this there can be a hundred different solution also there so anything which you can come in your mind could be the right answer. That's why I always say that there is no right answer there is no wrong answer in the system analysis and design World. I'll just give you some of the most common solution which is available across the internet. Okay. So common problem and the common solution is a available. We are just trying to discuss that okay in an interview might be your interview might not aware of this common solution. He might be thinking from that different angle. So this could be a new thing for him as well. Okay, so you can always discuss everything could have a pros and cons but that's fine. Okay, so the entire intention of the system analysis and design interview is to just you put out your thoughts. You think logically and somebody can counter that? Okay. This could be a problem. Then you think about it? We can add this step to solve this problem. We can add this step to solve this problem. Like that, so eventually gradually you enhance your specific approach. Okay, so that's how you do it. Got it. Let's second another example in the system analysis in design world. I know this could be sounds a little boring, but that's how the system analysis and design is. Tigger another good example, okay. This is also very common problem generally ask in multiple interviews. Okay, and I'm talking about a big interviews like a Google Microsoft and those kind of an interviews. Okay, so like designer URL shortener another problem. So another problem URL shortener is what if you have seen it. You have you created a one post? And that is a one big URL. So what people wanted a very short URL for that. Okay, so that is a URL shortener. So the idea is you create the URL shortener. Okay, so somebody is giving you the You need to build a set some something like that. Then let's say. This is your Twitter server. somebody sends a shot URL a full URL Within that server. Twitter will give you a short URL. Okay and later on. You will use the short URL okay to connect to something, okay? So this is called as a URL shortening. There are a lot of lot of examples if you have seen it, let's say for example if I can show you in some way. on this machine, let me just Go down to that link. Then any of the link will post you will see that there's a shorten URL. You always find it. for example Let me go to any of the post. Okay. I'm sorry. Let me just go there and let me show something. It's not loading up. Okay. for example Oh, no, this is does not have it. And give me a little more time, please. Okay, you see here. All these are the short links. See, these are the LinkedIn and then it generated some short links here. So this is a one number. This is one number. This is one number. This is one number. This is one number. So this is a short URL for the linear when I click on it. There is a one bigger URL it will find okay. So if I click on the new tab You see it's some YouTube videos something like that. Anyways, I don't want to play but this is a big URL so understand the point. So this is an entire big URL but it is converted a short URL out of it and the short URL is something not very important point Okay, so this is a short URL got it. So that's our short URL can be done. So whenever somebody's try go to the LinkedIn and try to enter this short URL it will go to the LinkedIn. and what LinkedIn database will do is You go to the LinkedIn LinkedIn. Open up this URL LinkedIn go to the their tiny URL or short URL database correspondingly. It will pass this value and in there database there is a one long URL return there. So it will pass on that long URL and automatically under the browser will go to that long URL. Okay, so you can see that when I was clicking on this LinkedIn shot URL I got it along URL automatically that is of a YouTube. So actually when I was putting here, I have put I have not put this short URL. I've put the a big YouTube. Url, but what LinkedIn has done is automatically it converted it a big URL of this youtube.com slash slash slash something converter shot URL of it and place that shot URL got it that is called as a tiny URL or this shot URL. This is a pretty common phenomenon in most of the system. So there's a lot of short URL common you will find that lot of. Lot of SAS product is there around it. So you can you can pay some money to generate the short URL for you that also they do, okay. That is easy to remember so you can see that basically this is nothing but a number. Okay, you can see that this is nothing but alpha numeric number. And mostly it is not even alpha numeric number. It is basically and harsh code. So most of the tiny URL or this short term URL uses and hash code. So whatever you pass based on that it create an hash code. And it just add that hash code you see for all of those things for short URLs. It has an added just and hash code. Okay, so based on that. It can convert. It can do that how it works. I'll show you in short. Okay how this tiny URL think works. Okay. You see the Prototype is look something like this. So what we do is You go to the tiny you are you go along URL, they'll pass it along URL into and one hash function and they create a short function a hash function value something like this and what they do is in their database. They will have a three columns. One is your ID column. The second is this tiny or a short URL short URL and the last column is the long URL. So whenever somebody hit that a short URL the system goes into this database check correspond to this short URL. What is the long URL and it will pass on Okay, so there are two things one is convert long to the shot. Like for the first time second time when somebody give a short URL it for this shot automatically is give the long URL. Okay. So under the hood Works through and hash function way. So you what do is do what you do the hashing of it. So long URL it convert the hash and we will put or append that hash towards the end. Okay. So this is how if you see that entire flow is look something like this. Okay. So for example a new URL comes in you put a long URL. It will put it to the hash function. It will convert a short URL it will check whether this short URL is already in the database because you create a one hash value it might possible that this hash value already exists in some database in that means it is what it is a collision. So if it is not available in the database, they will have that three column table maybe in that they will use ID long URL and short URL. They put it there and done. Or maybe if it is available in the database that means there is a collision. So what they do is in that long URL, they add some constant value and then again pass a hash function. So this time it will create some new URL. Okay, and then they pass that that new hash code NC it if this is available in the database probably it is not and then this gets saved. Okay. So this us kind of a mechanism is used for shorting the a bigger URL. Okay that is called as the creating a short URL from the long URL using the hashing technique. This is pretty common in a very bigger system. See all those things which we are talking about. It is not going to work for a small company in majority of the company. This is not Needed trust me in majority of the companies. It is not needed. This is we are talking about like 2050. Or a hundred bigger companies in this entire universe for them this going to be work majority of the times you don't need it because other companies are not that big that they have to go to that extend. Okay. But systems and design we talk it from a high level very big product based company perspective. So there they can I ask you like how you create a short thing URL what kind of for technique you use it? So this kind of for, you know, high level diagram or high level architecture. You can show it. Okay. This is how something can we build around it. Got it. So entire prototype again in that now this is a prototype you build it. If you look at it into the system manner it will look something like this. To add everything there. Right, whatever we learn at the start. So somebody enter the you know, somebody enter let's say A short URL so this time somebody enter a short URL corresponding you to redirect to the long URL, right? So what you do, there's a lot of people might be coming with short URLs. So you have a web servers. What web server do is they go to the database or the cache and check for this short URL There's a long URL is available in the cache. If it is, not it go to the red database find out that long URL and pass it to the user. Got it. So in this there are two techniques one is right. right means is you give a long URL for the first time to convert the short URL second time. When you come back you give these short URL and expect that I will give you the long URL right? For example when I go to the LinkedIn here. So when I go to the LinkedIn here, you can see that when I was posting that time. I have given the big URL. LinkedIn has converted the short URL for me now, but when I click on this that means I have the short URL. I go to the LinkedIn and say that okay, this is short URL. I'm sending give me the long URL. So automatically LinkedIn has to go in their own system and do this thing. So somebody is now entering this short URL. They go to the database you go to the server go to the cashier or a database find out what is a long URL and send it back. Now there are millions of people who is sending the request to the LinkedIn to give the bigger URL. So what they done is they have added the load balancer and they added the multiple servers similarly. This could be a millions of the links. They are saving it right so they are doing what they're creating the multiple databases as well and they have the caches as well. Okay, got it. So that's how they can scale the system. So scaling your web servers killing your database killing your cache adding the load balancer all that concept. Remain the same right what we learned we just place it here. That's it. So that's why I said it like this concert with which we learned can be put in place anywhere or almost everywhere. Okay. So this concept which we learned at the start is can blindly put anywhere wherever there is a number of more number of users and you are playing with the rest request get request post request like that so you can play this anyway got it. Now there could be another thing. Okay guys, I have few more use cases. Tell me in the chat. Is it should I continue talking about it or it is getting too heavy. Please let me know in the chat chats
Rajneesh Dhir: Please continue
Deepak Goyal: are open shall we continue I want to
hrishikesh patki: Please continue.
Deepak Goyal: think about little bit about.
vivekanand dhumaskar: continue
Deepak Goyal: the next topic is
Ananda H S: plese continue
Deepak Goyal: The YouTube the next topic I have with the notification system. So I need to talk about two more things. Gopi Nath saying continue Anand
Krunal Sagathiya: Please continue.
Me: please continue
Deepak Goyal: saying continue vivekanandu
Krunal Gada: Please continue
Ritesh Ramesh: Please continue
Avijit Mitra: Yes
Deepak Goyal: Another design another design is let's say designer YouTube this time. Okay. Now how you will do a YouTube. So let's say you sit in an interview somebody talk that. Okay. Let's design our own YouTube. Okay, you say Okay. YouTube is a very big. For YouTube itself will take like 10 years to be such a highly scalable. You want me to do it on in 30 minutes, but I will try okay. So see whenever this kind of questions comes into an interview how you proceed understand this basic thing. Initially when somebody say this a blind word that okay. Let's design a YouTube. Let's design our Instagram. Let's design a Facebook whatever it is. The first thing which you need to do is you need to try to scope it little bit. So you try to discuss, okay? What are the major functionality which we are talking around it or which which you want me to cover around here because YouTube could have a multiple functionalities. Okay. You might be thinking you might be further asking if they don't say YouTube they say some other name. You can ask it how many number of users you are expecting. What is the average number of requests this system has to you know, scatter something like that. So you can engage with your interviewer to ask more things see in the real world. Also this happens as an architect. If you go insert it into you know in front of the client it is not the clients say that I want to build a system and you you start doing it. No you counter questions a lot, right you try to ask a multiple questions and you try to get the complete information so that you can design the system. Okay in an interview, you should not overwhelmed your interviewer with lot of question. Don't do that. Okay, so hardly asked like four five seven questions. And then you start doing something. Okay. So as those basic question try to do some basic diagram, you try to build something then talk to him. Okay that I assume that and few things which you're not asked and which he is not said so you categically put it like I assume that for us. We are building a YouTube for us. I assume that uploading is one of a big problem. Second is like there are a lot of viewers who want to watch it. So right now in this YouTube, we are focusing upon watching the thing so that people will can watch it, you know, very fast something like that. So that's how you can put your design constant by your put saying that this is assumption. I'm taking it so that if interviewer has something else in the mind he can you know counter you at that point it said that okay. No, no, don't do don't do that or don't take this this your assumption is not right Exacta. So up front tell that whatever the Assumption you have taken to build that so that Interview will understand that you design in that manner, okay. Communication is very very important. Okay, and don't get too indulge into asking too much of a question. Okay another day you want to show something as well your caliber also need to get show out. Right? It should not be there. You just end up with asking the question only okay, because it feels like that you are you know. Moving away from answering the questions so don't do like that. Okay, great. So, let's say we have a vehicle design a YouTube. We have an upload the basic functionality which we are looking for is you want to upload the video fast it is it should have a smooth video streaming. Ability to change the video quality like it could have a 120 144 P 250 or like a three forty four or whatever it is so we can change that quality.  And the infrastructure cost if possible. It should be lowest system need to be highly scalable highly available. and reliability requirements Okay, so let's say we have to design the system in this way. How we process? Or how we proceed? Okay. So if I look at it the basic which we learn in the initial phase the basic diagram should come into my mind. What should be the basic diagram should come into my mind. The basic diagram we should come in my mind is this right that I have a user. lots of lots of users right and I divide everything into two level one is I know that once somebody load a video. Okay, when somebody uploaded a video that video we cannot edit right? You cannot edit the video you can just add it the description of the video, but you cannot change the video, right? So what we do is For videos streaming video is a constant. So we put it into the CDN because we know that CN will give you the fastest way. Get me a second guys. Okay. so this CDN will and return the request in much faster way, right? So CDN, as I said it at the start also that even Netflix also uses the CDN because cdns are the content delivery Network. They have a multiple distributed systems and you can push your data there. They keep it in in their system and they can render this is all this static thing very very fast. So what we do is we have all our videos whenever somebody want to watch our videos they can we redirect indirectly to our CDN and let's say for they want to create the user ID. They want to you want to make the list of how many videos a person has is here subscribe to how many people expect Etc all that rest of the information. We keep it where in our application server correct? So that's how First at the first level we bifurcated all the small C. Handling the user information the description of the videos number of the videos the your playlist all that would be a small piece of information. That is what we keeping in our servers the videos which we want to display it the fast speed we're keeping that video which is constant like images audio video Etc all we can put it at the CDL. That's how we build it. Okay, so two level done, but again, there's a lot of problems. Okay, which we need to talk about it. We need to think about it how our video can generate multiple, you know. Multiple quality. Okay. So it's like a video encoding is needed. Okay. So let's say the way you save your data right that need to get defined and few other things like even like millions of people are trying to upload it. Right. So how you can handle all that millions of requests. So something is needed to be done. Okay. So how even if you magnify this entire prototype into a little deep deep level in the Deep level again, this will look very similar to what we have done at the start. So it will look something like this. Okay. Tell me if you are able to understand it or not. See this is a user. Multiple user are trying to upload or change create the user IDs putting the data inside. reading the video playlist liking something subscribing something. So there's a millions of request comes every every day even more than that. So one server cannot handle for a YouTube, right? So we need a load balancer. We have our application server, which has a database. Are which has a cache? And that handles all that information make sense. So all your what is the what is the video detail user detail all those metadata information. It's saving here. right and whenever somebody upload when somebody upload a video that instead of storing into your application server, you store it like in some Cloud space will be using ADLs Amazon S3 something. So you use some storage bucket a cloud space where you put that and from that cloud storage what you do it under the hood, you will start doing the encoding. Or the transcoding so understand like this. if I have a one video. Which I added seeing that it is of a quality of a 1080p. Okay. Now if I have to Showcase this video at 144 pixel size at 240 pixel size, maybe at three forty eight four forty seven twenty. pixel size It's a different video encoding right so you need to process that video and put it at like at different encoding level. Okay, so that this same video can be pretty different quality so that encoding you do at the end code transcoding server. So this is the work of a transcoding server, which will Encore it for a different quality level. Okay. and then again this cannot be done by a one person so you make a queue and there are multiple workers server is there who is doing that? Once they done it? They will update the information that video is successfully uploaded Etc onto the database. And this transcoded video eventually gets stored at the CDN servers because end of the day if you look at it the video directly we wanted where under the Syrian servers and all our metadata. We wanted on normal system. So this flow Remains the Same right that multiple request comes. So we add the load balancer multiple servers multiple database servers. And for this encoding the one who do the encoding we also need a multiple servers. We put that every encoding thing into a queue. Everyone's whoever is free will take the message from the queue process it and whatever be the process information is that gets saved into the CDN got it. So that's how at a very high level the video uploading flow works. Even when we go little bit further deep down inside it. This can further, you know. And get further deep down. So let's say if I just check only for the updating part of the metadata. So if I take out the only the updating metadata part, this is something like this right very small piece. You change your name you change your video description anything so that's a simple request. We set it all that request. You are handling through an application server, which is stored in your database. pretty simple logic load balancer multiple application servers multiple databases and the caches got it. if I talk about updating the the video transcoding the transcoding could have been something like this. So just again, we we said it high level we don't have to write the code and do anything. We say that original video will come if video is there in the video it will check the quality. It will check the thumbnail if thumbnail is not there autogen at the thumbnail is some Watermark me to add at it transcoding of the video transcoding happen where we generate like 144 P distribution 240p distribution like that. If audio, is there a separate audio encoding happens everything gets assembled and final video. You will find it here got it. So again, You might not be able to think up to this too much level it's completely fine. Whatever is coming into your mind. There could be 100 other things also. Okay, which I am not said it. Okay, which could also be there. Let's say if somebody doing and it editing so that editing option should be there somehow so there could be a multiple number of things which somebody can think about it. As I said the idea of a system else is in design is you think at a broader level you pick up few of the functionality you talk about it and you try to focus around it. That's it. Okay, and the main thing is you do some kind of Distributed system somebody will understand that. Okay, you understand that at least these multiple requests except all this get handled out cut the boy. So that's how you can handle the the YouTube system also The same example somebody can ask you for the in terms of a Netflix also. So almost this can be you apply for the Netflix. Also. They look at Netflix also can have us one system. We are a metadata is saved user request user subscription all that can save all the Netflix. Video rendering service probably will done through the CDN and CDN will take care of all that video running and all got it. So that's how you can almost in the similar design. You can think about the Netflix system also. Okay. So the same logic maybe somebody can name in terms of a Netflix somebody can name in the terms of a hotstar. So the name get changed but the idea will remain the same. Okay, so think logically from that angle. Okay. Got it. Let's have a one more use case. I I think you guys wanted to continue. So let's let's have a one more use case and then we get into the Q&A. Another use case could be is. Unnotification system and notification system is a is a pretty common system. Okay, which is there in entire most of the application you think about the YouTube you get the notification right? You click on the Bell icon and then you get a lot of notifications start getting the notification. You have the LinkedIn notification when you enable the notification on on the LinkedIn you can People need notifications every application you see the notification system generally. There is a question come in the mind why people do a notification system. notification system as a two reason one basic reason is that Notification wanted to give the user preferences. Okay. So user preferences means is somebody don't want to get Overloaded with a lot of messages somebody just wanted to get notified only when they're favorite people, you know do something or when something important comes so that's why somebody enables the notification system that we don't, you know preach somebody's privacy every time so we just notify them then ever. They want us to notify, okay. So that's why notification system is there and user based on the user preference user can selected I get notified when somebody post I can notify when somebody like my video like subscribe my video something like that and based on that system can send the notification to them. Secondly is like that. ultimately If everybody is getting the notification for everything the system will you know get too much of the messages so purposefully also they want to avoid at some point of time when you have a very bigger system. So there will not want to send the message for everything. So they want to send it only for the user who is opt in for that. Okay, so that is also the reason so long story short. Somebody can just tweak this question and ask you that okay, how you build a notification system for LinkedIn how you build a notification system for YouTube how you build a notification system for Instagram something like that. Okay. So this question can come from anywhere? Okay, but again the base logic will remain the same. Okay. So let's say how any of the notification system can be done. understood one common logic the more you disintegrate your system the more scalable. It will be understand this a very powerful point the more you know you disintegrate your system the more scalable it could be so let's say if everything is on to the server database everything onto one thing probably it's tough to scalable. If you have a server level layer different application layer different database layer different, then you can separately scale application layer database layer separately like that. So the more you do disintegration the more scalability you can achieve it. Okay. great, so let's say Let's talk about this notification system. So in this notification system. Right. It's not working for me. Yes now it's working. Okay, so in most of the notification system, generally we have a third party see understand this way. This is pretty important. Let's say you we talked about from the LinkedIn angle itself. Let's say I am doing for LinkedIn notification LinkedIn cannot directly send the SMS LinkedIn cannot directly send the email Indian cannot directly send, you know, some iOS notification or an Android notification. It always need a third party. Okay, so everywhere in most of the notification system, we have a third party. So it has to take on that email from some third party. Maybe there are a lot of  Third party email is like sendgrid it may be. Your meal champ lot of third parties are there which provide this bulk email facility? Okay, so they have to take that facility maybe for the SMS. They have corresponding like a a big Telecom company which is giving you the bulk SMS thing with the EPA so they integrate their system with that bulk. SMS API same thing happens for the Android apps same thing happens for the iOS. So iOS is enabled there application Network. Similarly we have with something for Android. So you have to connect to that third party and you can push the notification through that third party Integrations. Okay. Got it. So all this cannot be built by any of the system generally people uses the third party only. Okay for all this email SMS. Let's say tomorrow. I want to send WhatsApp notification every time so I need to integrate with the meta apis. Okay, So Meta WhatsApp business API is there so there is again a third party. We have to pay something to the business API of the meta and they will do it. For example, when I send you the email all the bulk email. I it's a cost to us, so I cannot send it from my email ID my email. I didn't block up any day because Sounds like our 250,000 people or one like people every time so in that case we did we have taken the bulk email message Services bulk SMS Services Etc. We have taken up when we send it through that. Okay, so we'll talk about it, but for sending anything you need what first thing you need it like. You need to capture all those contact details. email ID phone numbers or whatever be the address. So again the same thing happens there are millions of user in your system. Somebody is installing your application or maybe signing it up. So again lot of request comes in it go to the load balancer load balance send it to multiple servers and then multiple server will send your information in multiple data basis. So the minions of users information get save on multiple databases where their phone number their email ID all that get saved because eventually we need this information because when you send the notification you cannot send it in the air, right? So you have a millions of user to whom you want to send so you need their contact details there. So this is the flow for adding up their contact detail. So we need a one scalable solution that can handle the millions of customers to add or update there. Phone numbers or email ID got it. Great. Then if I look at it, very high level my notification system would be something look like this. So imagine that. I am sending The notification multiple level service one is somebody clicker like on my post. Notification when somebody start following me notification when somebody sent me the contact detail, right? Sorry, somebody send me the connection didn't connection request. So there are multiple multiple functionality on which you want to send the notification, right? So what you do is Whenever something happens one functionally happen they can trig. You have a one Central notification system. That the sender request to notification system that ok. Send I have let's say somebody click on like so like functionality sends. Okay. Somebody is like it it's send a message to the notification. So let's send this notification. Somebody send a connection request you connection request functionality send the notification system a message that somebody this is the person who is send the connection request. Please sell this message out to their respective user write it. So there are multiple Services which causes unnotification needed to be sent right. So there are multiple services. And that is sending a triggering this notification system to send those multiple messages at a very high level. This prototype looks something like this. Okay. Now to make it little more, you know more little deeper. Now, if you go a little deeper now the same system will look something like this. Okay. So we don't want a one system to be, you know, a bottle neck. So if our notification system also, we want a multiple because multiple request are sending that we want to send the notification. So one notification server will not do the work. We need a multiple servers again. We need a multiple database says multiple cache to hold all that message which needed to be sent and then what we do is will sell it to that. Third party but before sending to third party, we do not overwhelm the third party because third party might have set at their rate limiter as well at the same time. You cannot send a million of that every few seconds. You shoot some emails or some messages. So what you do is whatever be the notification comes in you put it into the queue and from the queue workers will take out the message and slowly keep on sending them. Okay, you always find that notification system is not the real time. Most of the time notification system will take some time couple of seconds. Why because generally of this mechanism that notification system goes into the queue and As soon as the it has been limitation that okay. This many message go per seconds per minute and accordingly. This will go in sent out. Okay, so that's why you find that sometimes getting an email will take some time getting an SMS immediately get sometimes like that. Okay, because all that works in some kind of a rate limitation also. Okay, so that's how you can see that notification system is very clear. Some notification request comes in it will send it to the queue because immediately might be possible everything cannot be sent. So at least it is available in the queue as soon as the worker get chance it pull out the message send it pull out the message send it follow the message send it pull out the message send it. Got it. So that's how any of the notification system can be highly scalable can be made. Okay. As I said the same you can pump in everywhere. Okay, you can put it like for the Netflix notification Facebook notification Instagram notification anywhere. So if someone can ask the question from the any of the system almost the same logic you can apply there and you can give the same this kind of a system so slowly you can build this system and you can do it. That's it guys. That's all I have it. There are few more use cases. Are there like something based on the Q mechanism something like making your own Google Drive making all your own chat boards making your own Instagram Facebook something like that making your own. AI B's model something so this can be multiple multiple example, but you know that right even whatever we do we cannot cover all the entire options available in the market because there can be multiple thing, but if you're looking at most of the thing you're finding this thing are pretty common Your application layer multiple cache add Karo. Then database add wherever needed at the CDN. You can add the queues if needed. So these are the basic building blocks, which you can use it everywhere. Okay back to you guys for all the question and answer. I'll just stop the recording and start the recording again. Stop the recording. And I start the recording again. saurabhu in the call I don't know saurabh's mic is off I guess. Yeah, please go ahead. and start asking the questions if you have yeah, even as a question, please raise your hand and start go.
Rajneesh Dhir: But yeah deepak's I'm one question. So if you want to go to study for other use cases, so how we can go and study from where any kind of a source you have or maybe we can study because the others use cases like a setting for you but Uber or Ola it's about common use case which is been
Deepak Goyal: Yeah, so
Rajneesh Dhir: asked.
Deepak Goyal: there are two ways either I if you guys are interested, I'll share all that case studies with you so you can go through it. I think more or less this is okay. I mean, this is good enough. It's not I don't think so add too much is question is going to ask with you guys being a data engineer. But again, if you want to cover that, I'll share you the sheets. So your choice if you want me to go through it. I will take up one more session we go through it. And if you feel that you can do it on your own we can take that as well.
Rajneesh Dhir: It will be great if you could share it and you can take another session for that.
Deepak Goyal: Yeah, I will I will share at least 10 20 more problems. No worries in detail.
Rajneesh Dhir: Okay.
Deepak Goyal: Okay. Okay. Thank you. Rohtash.
Rohtash Kakkar: So and thanks for this wonderful session Deepak. I really enjoyed it.
Deepak Goyal: Thank you.
Rohtash Kakkar: Now the use cases which you discussed I definitely relevant but but you know within this like one and a half hour to our sessions, we really cannot covered all the use cases. So if you don't mind can I discuss when use case over here and moreover? Yeah, when we talk about some complicated use cases we come across multiple Technologies also. So if you don't mind, I would like to put one use case, which is actually very relevant these days.
Deepak Goyal: So no problem.
Rohtash Kakkar: Okay. So for example, we are talking about
Deepak Goyal: Go ahead, please.
Rohtash Kakkar: you're not chatbot these days and in order to build a chat bot with the documents in the background. We will have Vector DB of Our Own. And of course, we will be able to put some Jenni I'll go in place so that the questions can be answered. So for this what kind of a text back would you recommend and from system design perspective what I should keep in my mind.
Deepak Goyal: You originally wanted to build it or you're talking in terms of just like just like a system design level. What is the need?
Rohtash Kakkar: And I want to build it as a product so that I can offer it to anyone who wants for it. It could be a subscription basing.
Deepak Goyal: Okay.
Rohtash Kakkar: It could be a customized
Deepak Goyal: Okay, so honestly, there's a lot of good services are there. So I think saurabh's recently build one of that. Some of you in the call. Let's just ask him to come because he recently built it for his project service working on this building it so he's realistically doing it. Let me just ask him to come if he's there. Yeah, he's coming in the call. So we'll discuss along with him. He recently building it. He took all the credentials of my Azure account with me. He is building it so yeah
Kailash Kant: High Deepak University so related to this
Deepak Goyal: Yeah, please.
Kailash Kant: actually the CDN. So can you please leave again a CDN Parish with the I just missed that part. so as the highway driving that moment so
Deepak Goyal: No, no problem. So I'll just do a Google I'll just show you. So you get some idea?
Kailash Kant: It is kind of a hardware or it's kind of a service.
Deepak Goyal: It's it's a service. It's like a cloud-based service.
Kailash Kant: Okay.
Deepak Goyal: Works another Hood This will show you the images so you get some idea. the whole intention If something like this, okay, so this is how the Syrian servers looks like. Try to expand something. Okay, so they have that multiple servers. Okay. And what they do is here look at this. So they have multiple servers situated multiple places across the world. Okay. So what do is it will reduce on the latency as well and it will you know It will render everything from there on okay, and that is a very fast access. So it is not like your server which has to process the something. It's kind of a steady data. So just directly the request under the hood directly go to that CDN CDN picks out the address from where which part of the world this request
sourabh sahu: So to add on to this the book like in
Deepak Goyal: is coming in and based on that. It will really internally direct to that's specific. It and from that the data get rendered to you. So you get two Advantage One is the speed second is like the latency is also very low. So that's how it will bring the benefits. Okay?
sourabh sahu: one of my project like for a web page, we have to deliver the images. So you see the banners and the footer images and all those things. So we put all those images in the CDN servers and CDN servers are based on the region. So if you are accessing from India, so I will be connecting with the nearest CDN server. So my website will have that those
Deepak Goyal: Absolutely.
sourabh sahu: URLs and those images so it makes me it basically reduces the latency.
Kailash Kant: Example so saurabh's so so in that way so it's automatically managed by the Syrian services. Like IP IP level listing it is all
sourabh sahu: Yes, yes.
Deepak Goyal: Yeah.
Kailash Kant: intelligent. Okay.
Deepak Goyal: So CDN is the money CDN takes a big amount of money else. It's not like that.
Kailash Kant: Okay.
Deepak Goyal: So see how the data which is
sourabh sahu: it's there are certain algorithms
Deepak Goyal: processed through the CDN Syrian takes the data based on that. So if you cost it, like it costs some part GB. It's cost some few dollars around it. So that's how the cost will come. CDN delivery cost
Kailash Kant: So it automated it automatically just deliver your request to the nearest data and say that okay.
Deepak Goyal: Absolutely. It's load balancer that takes care of everything. Okay?
Kailash Kant: For example, we type the Google dot
sourabh sahu: that has to be put in place actually.
Kailash Kant: in so it's generally goes to the
Deepak Goyal: Okay, so you can see that this this
Kailash Kant: Indian server google.com.
Deepak Goyal: CDN is like pricing as saying that its lowest $2 per terabyte. So it is it is transfer. It is not the storage understand. So let's say somebody put a like a 1GB of a video. And if like a thousand people are watching that video at the same time, so it's like one terabyte I got transferred. Okay, think like that. Okay, so it's a transfer. It's not a storage.
Kailash Kant: Okay. 
sourabh sahu: So that's why it's more focused on latency.
Deepak Goyal: Yeah.
Kailash Kant: Yes.
Deepak Goyal: Okay. Yeah back.
Kailash Kant: And there's a good service. Yeah.
sourabh sahu: you are
Deepak Goyal: Yeah, a lot of blogs static websites uses it where almost this course free because the data size is very very low but for the bigger services like, you know, Netflix and all they pay a big amount of money.
Kailash Kant: it's 11 Azure and AWS like with the same name like Syrian something but
Deepak Goyal: Yes, Syrian Services is there.
Kailash Kant: Focus you didn't as a service, okay.
Deepak Goyal: Yeah.
Kailash Kant: Thank you Deepak.
Deepak Goyal: Thank you. Yeah any other question? Saurabha rohtash wanted to talk about the chat bot application, which you think which you started building.
sourabh sahu: So rohtasha, I like so once Deepak sessions are over like me probably like he will give me you know time slot to do that. So there we will talk about the how you can build the chatbot over the custom data. So for that we have an on your side. We have Azure AI Studio. And a similarly on AWS side. Also, we have a development kit. So
Deepak Goyal: Yeah, Sage me.
sourabh sahu: yeah, so there are more I'll talk about it. So allow me a week's time or so and then we will discuss it.
Rohtash Kakkar: Share saurabh looking forward to it. And at the same time I am more
sourabh sahu: Yeah.
Rohtash Kakkar: interested also in the you know system design thing which Deepak cover today and I would also like to see the custom solution without using these Azure or AWS services at the same time. I would like to have a look at those Services also because that will make the life a lot easier.
sourabh sahu: Like, you know, yeah, so see CDN concept is not something new like I was working on the Syrian kind of
Deepak Goyal: No, he's talking about the system
sourabh sahu: thing, you know.
Deepak Goyal: analysis and design setup.
sourabh sahu: Okay, okay.
Deepak Goyal: Not CDN.
sourabh sahu: Okay, okay.
Deepak Goyal: Okay, and and again, I know that you
sourabh sahu: so
Deepak Goyal: are already doing it, but he is also interested like in your chat chat board your, you know connecting to eventually your vector DB. Okay.
sourabh sahu: Okay, okay.
Deepak Goyal: so
Rohtash Kakkar: Yeah and costing part.
sourabh sahu: Actually the speed. Yeah, please go ahead.
Rohtash Kakkar: And and the costing part of the solution also when we are, you know going through AWS is 0 or we are building our own thing with our own technology stack. So what would be the cost in all these three solutions?
sourabh sahu: See for cloud if you talk about the chat bot or the chat assistant, it's very costly to be honest because you are going to use the underlying model and the model executions require a compute and all right.
Rohtash Kakkar: right
sourabh sahu: So it is a little bit costlier on if you try to build your own like procuring your own Hardware or maybe buying VMS over the cloud. Still it is going to cost you. So that is a like a you can say con if you want to use the AI enabled chatbots and all otherwise, there is another concept of dialogue flow where you can simply, you know, create a control flow that okay. If this question is asked give this answer like that, right? So there are certain alternatives are also there. So if you are looking for the AI enabled then it is going to be a costly solution. Because yesterday only I was
Rohtash Kakkar: nobody
sourabh sahu: exploring on that. Yeah.
Rohtash Kakkar: super super so
Deepak Goyal: saurabhas burner 10,000 rupees from
sourabh sahu: Yes, and Deepak was called scalding
Deepak Goyal: my account
sourabh sahu: on to me yesterday. Yeah, this actually happened like in the morning only called when I got
Deepak Goyal: And honestly this happened.
Rohtash Kakkar: In deepak's accounts, there are too many zeros so you can of course take 10,000 out. So saurabhi I am totally looking forward to that session wherein you will discuss.
sourabh sahu: definitely definitely you can depend on me. I am going to take up like I'm
Rohtash Kakkar: All right. Yeah.
sourabh sahu: preparing on to it like things that can be covered and rest assured things will be covered into it.
Rohtash Kakkar: 
Deepak Goyal: Okay. Thank you. Yeah any other question anyone?
Avijit Mitra: So Deepak disability. I want to check like that.
Deepak Goyal: Yeah visit.
Avijit Mitra: You said that rate meter, right? So which server we need to install
Deepak Goyal: Me it limited.
Avijit Mitra: that one?
Deepak Goyal: No, this is not something you install. Okay?
Avijit Mitra: Okay.
Deepak Goyal: Yeah, so good thing is that there are a lot of built-in solution also available. So like a built-in kind of a solution is available which to it. You can build from this scratch as well. Okay. So sometime some built in solution. Also, you can put in place some kind of software which can put in that can do the work for you or you can build everything from your scratch also. Okay. So rate limiter is something you want to you know for basically for your Rest apis somewhere you want to use this more more frequently. So how many yeah.
Avijit Mitra: right but like
Deepak Goyal: So for us as a data Architects, probably it is not too much of a concern. But yeah.
Avijit Mitra: yeah, I want like that is azure.
Krunal Sagathiya: @roshtash  - watsonx Assistant will be your friend. - https://www.ibm.com/products/watsonx-assistant
Deepak Goyal: from the implementation perspective
Avijit Mitra: API management you're talking.
Deepak Goyal: I think that can be manage under that as well because I don't I have not
Avijit Mitra: because
Deepak Goyal: gone gone into that API management detail, but if probably they will do it because most of the Azure services or the cloud services are Adidas like so distributed denial of service whenever this happens they take care of it. So under the hood, they already take care of it like based on your pattern. They understand that okay. This is some kind of threat.
Rohtash Kakkar: these friends are very expensive Krunal as Sourabh mentioned :D
Deepak Goyal: some kind of you know, somebody is trying to scam you or something like that.
Avijit Mitra: But okay.
Deepak Goyal: So they do that.
Avijit Mitra: Yeah management. Okay not. And CDN, like I used earlier for my application like we install like we just JavaScript and everything. We put it in CDN and now there's that and jayscaped everything they provide as a CDN URL so you can use that.
Deepak Goyal: Yeah, absolutely. So even what you can do is let's say for example, if you go to any of the pages for example something I'm not sure that this image is coming from there if you just right click on it view page source. In Google, I think it will be tough to find it. But most of the other Pages you go there and you just search controller CD and you will find something like a seed in. Url. I know Google will not even really show like that.
Avijit Mitra: Yeah.
Deepak Goyal: But yeah other website you will definitely find like that. Okay, for example, if you just go over our website only we have it. Into the end.
Avijit Mitra: the
Deepak Goyal: So if I go I'll show you something. I don't know. It's visible there or not. I'm not very sure. Well we can check it right click. You paid source. Because we have added it. I remember that. somewhere Yeah here you can see that something is coming once and CDN dot vnet. So our this scripts are coming from this so
Avijit Mitra: Yeah, this JavaScript.
Deepak Goyal: This kind of way people put in. Okay. so this comes at a very fast pace because It's a Serial server. Okay? awesome
Alishkumar Manvar: Oh, yeah.
Deepak Goyal: Yeah, it is.
Alishkumar Manvar: Yeah, so Deepak, I was not for first half of first-hand half an hour. Okay, so can you please let us know like when this system design comes into picture. So while dealing with solution architecture we need to miss discuss this thing or this.
Deepak Goyal: It's generally the system is in design generally comes in the product base company. So let's say you are sitting for some kind of a product based company interview as an architect or even
Krunal Sagathiya: They are not -- it's based on requests, and they are prebuilt AI systems that learn based on good and bad responses. It would be good to know about open-source options and to have some kind of comparison.
Deepak Goyal: nowadays even if somebody had a technical lead level or a software developer senior software developer level. They have a tendency to get into this kind of a system design interview. Okay, generally for a data it is less probable, but for a technical architect, this is very high probability that somebody can give you this kind of question in a product based company not in the service business because whatever the solution which we talked about in this kind of a system and this is in design. We talk from a very bigger. Project angle not from a small angle because in the small project we are normal architecture works. So but for a very highly scalable application now design get a little bit change, okay. So there it could come handy. Okay.
Alishkumar Manvar: Okay. So in that case like Miss whatever. Okay, like as a working is a data arcade, right? So in that case whatever has been like a laundry, so that that thing should be like fit somewhere into into today's session right the ultimately like whatever things we have been knowing right that we have to make fit somewhere over here, right? So that is
Deepak Goyal: Understand. Okay Alish understand data arcade is someone who is playing around the data? Okay system analysis design is something which is building an entire system. Okay, so probably here the more of a knowledge of for someone who is that's why I said this is more relevant to the application developers or application architect people who is Pro in designing the front-end backend and all those kind of an application. You're getting my point. So YouTube is not you worried about only the database part you worried about from the system side you getting my point. So from that angle the system design comes into the play. Okay, just not it's not more of a
Alishkumar Manvar: so you
Deepak Goyal: data architect thing. It's but it's more of a like a solution architect technical architect thing. Okay. Otherwise it targeting is more more,
Alishkumar Manvar: you okay?
Deepak Goyal: you know Focus around the data. How data is moving across the organization or across the multiple projects. So how this data model to get design these kind of pipeline. We should do it this kind of a data governance. We do it this kind of a technology. We should choose in for handling such a large data, maybe no secret DB Vector DB something like that. So it targeted Works around that mostly this is something generally comes for a technical architect people. but again Nowadays, there is a fantasy around the system analysis in design to ask by a product based companies a bigger companies. So that's why we try to cover it. Okay. So that if somebody is trying to give those interviews at least they need to know that okay. This is something what they can expect. in that those interviews
Alishkumar Manvar: So you meant to say guitar Clinic is smaller part of the entire system right though. Today's station. It is kind of like the entire we can
Deepak Goyal: Absolutely.
Alishkumar Manvar: say.
Deepak Goyal: Absolutely. You don't care like how somebody is you know is killing the application server. That is not your Zone. But vegan architect is a bigger guy. So, you know just a bigger picture. That's it. Okay, it's always good to have no a bigger picture also.
Alishkumar Manvar: okay.
Krunal Sagathiya: When salary become 150k+ we care about iy
Deepak Goyal: Okay. anything else
vivekanand dhumaskar: Hello.
Deepak Goyal: Yeah, wait, please.
vivekanand dhumaskar: How Deepak just tell me one thing. So basically a company is doing an RFP for a healthcare client for the data project. Okay. So actually we don't have like dedicated data architect Essence, but our existing are Architects like they have used Azure Health Data service in the architecture. So how is it different with respect to ads for injection and
Deepak Goyal: I need to check Azure Health Data service.
vivekanand dhumaskar: Yeah.
Deepak Goyal: What is that specific?
vivekanand dhumaskar: Okay, so like you also have not.
Deepak Goyal: custom solution seems like azure Azure data Health Service
vivekanand dhumaskar: Yeah.
Deepak Goyal: Okay, let me just check.
vivekanand dhumaskar: Enjoy a health data service age DS.
Deepak Goyal: Yeah, I can see that improvisation in business outcomes and suitable purpose of Building Technology, but but system
vivekanand dhumaskar: So also one more question I had is like ADF cannot support. streaming live streaming
Deepak Goyal: area
vivekanand dhumaskar: Yeah.
Deepak Goyal: ADF cannot support, right?
vivekanand dhumaskar: so like us when when we need a live streaming like say help data, which is like will be pulled from life.
Deepak Goyal: There you should not use an ADF. simple
vivekanand dhumaskar: Okay, so like how do we replace with that?
Deepak Goyal: see it could be depends.
vivekanand dhumaskar: What what?
Deepak Goyal: Lives stream you want to stream the data? What is your destination?
vivekanand dhumaskar: Like yeah, that's what like destinations also like yeah not we we want all these information actually to be generated. So like
Deepak Goyal: Now see it's an you need to understand. What is your Source? What is your destination? So from where the rate is generating and where you are sending or to whom you want to send real-time information, right?
Krunal Sagathiya: Good session Thanks Deepak.
Deepak Goyal: So let's say when you see a real time video like real time videos by the YouTube and you are the receiver. So in your system, who is this under? What is the receiver so that we can
vivekanand dhumaskar: yeah, so
Deepak Goyal: think about it? What could be something we can choose?
vivekanand dhumaskar: basically a horse like hospitals and other that Health Care Providers, they'll be sending the
Deepak Goyal: I think some of you are around here. Okay, so I've been
vivekanand dhumaskar: And on that data, we have to build analytics platform basically, so that
Deepak Goyal: See lot of things can be used someone
vivekanand dhumaskar: is like source.
Deepak Goyal: can use the cough call. So here somebody can use this spark streaming. If that is there multiple streaming option is there which can be used?
vivekanand dhumaskar: Can it be done only with the
Deepak Goyal: Okay.
vivekanand dhumaskar: databricks living all the Azure things aside?
Deepak Goyal: Set Vivek. Anand need a more information to take that decision. What is the size of a data? What kind of for data what is a structure of the data? So we need to understand that entire thing to get to a conclusion that this is the right. Extract to use or not. Getting my point.
vivekanand dhumaskar: Yeah, so like in case if I get more information and discuss with you like how how will be that possible?
Deepak Goyal: Send us a more information all year in this architect. People will love to that do that. Okay, you send it but then in detail.
vivekanand dhumaskar: Okay. Okay.
Deepak Goyal: Just don't do it a very hard, you know at a very high level. Otherwise, it's tough to design but
vivekanand dhumaskar: Yeah, but but certain like the company and company wants Deepak compliance also, so like the
Deepak Goyal: That's okay.
vivekanand dhumaskar: patiently
Deepak Goyal: But if they tell us I'm not saying that what is the data inside it? But we get to know that we get a 1
vivekanand dhumaskar: Okay.
Deepak Goyal: million records 2 million records. We have to process that with the timing these will be the multiple receiver. So at least we get some information to think about it what we can do.
vivekanand dhumaskar: Okay.
Deepak Goyal: Okay.
vivekanand dhumaskar: So yeah.
Deepak Goyal: Okay, great. Any more questions anyone or shall we wrap up if no questions there. Okay. Okay, seems everything is fine. Thank you so much. Thank you everyone for joining in. We'll see you next week. Bye.
Ananda H S: great session. thanks!
Deepak Goyal: Thank you